{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\siddique\\\\Desktop\\\\New Project\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport AppLoading from \"expo-app-loading\";\nimport { Asset } from \"expo-asset\";\nimport { Block, GalioProvider } from \"galio-framework\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { useFonts } from \"expo-font\";\nimport { enableScreens } from \"react-native-screens\";\nenableScreens();\nimport Screens from \"./navigation/Screens\";\nimport { Images, articles, argonTheme } from \"./constants\";\nvar assetImages = [Images.Onboarding, Images.LogoOnboarding, Images.Logo, Images.Pro, Images.ArgonLogo, Images.iOSLogo, Images.androidLogo];\narticles.map(function (article) {\n  return assetImages.push(article.image);\n});\n\nfunction cacheImages(images) {\n  return images.map(function (image) {\n    if (typeof image === \"string\") {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isLoadingComplete: false\n    };\n\n    _this.loadAssetsAsync = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                ArgonExtra: require(\"./assets/font/argon.ttf\"),\n                indieFlower: require(\"./assets/fonts/indieFlower.ttf\"),\n                \"Material Icons\": require(\"@expo/vector-icons/fonts/MaterialIcons.ttf\"),\n                MaterialIcons: require(\"@expo/vector-icons/fonts/MaterialIcons.ttf\"),\n                SimpleLineIcons: require(\"@expo/vector-icons/fonts/SimpleLineIcons.ttf\"),\n                \"simple-line-icons\": require(\"@expo/vector-icons/fonts/SimpleLineIcons.ttf\")\n              }));\n\n            case 2:\n              _this.setState({\n                fontLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._loadResourcesAsync = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", Promise.all(_toConsumableArray(cacheImages(assetImages))));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._handleLoadingError = function (error) {\n      console.warn(error);\n    };\n\n    _this._handleFinishLoading = function () {\n      _this.setState({\n        isLoadingComplete: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadAssetsAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.isLoadingComplete) {\n        return React.createElement(AppLoading, {\n          startAsync: this._loadResourcesAsync,\n          onError: this._handleLoadingError,\n          onFinish: this._handleFinishLoading,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 9\n          }\n        });\n      } else {\n        return React.createElement(NavigationContainer, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 9\n          }\n        }, React.createElement(GalioProvider, {\n          theme: argonTheme,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }\n        }, React.createElement(Block, {\n          flex: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }\n        }, React.createElement(Screens, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }\n        }))));\n      }\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["C:/Users/siddique/Desktop/New Project/App.js"],"names":["React","AppLoading","Asset","Block","GalioProvider","NavigationContainer","useFonts","enableScreens","Screens","Images","articles","argonTheme","assetImages","Onboarding","LogoOnboarding","Logo","Pro","ArgonLogo","iOSLogo","androidLogo","map","article","push","image","cacheImages","images","Image","prefetch","fromModule","downloadAsync","App","state","isLoadingComplete","loadAssetsAsync","Font","loadAsync","ArgonExtra","require","indieFlower","MaterialIcons","SimpleLineIcons","setState","fontLoaded","_loadResourcesAsync","Promise","all","_handleLoadingError","error","console","warn","_handleFinishLoading","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Image } from \"react-native\";\nimport AppLoading from \"expo-app-loading\";\nimport { Asset } from \"expo-asset\";\nimport { Block, GalioProvider } from \"galio-framework\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { useFonts } from \"expo-font\";\n\n// Before rendering any navigation stack\nimport { enableScreens } from \"react-native-screens\";\nenableScreens();\n\nimport Screens from \"./navigation/Screens\";\nimport { Images, articles, argonTheme } from \"./constants\";\n\n// cache app images\nconst assetImages = [\n  Images.Onboarding,\n  Images.LogoOnboarding,\n  Images.Logo,\n  Images.Pro,\n  Images.ArgonLogo,\n  Images.iOSLogo,\n  Images.androidLogo,\n];\n\n// cache product images\narticles.map((article) => assetImages.push(article.image));\n\nfunction cacheImages(images) {\n  return images.map((image) => {\n    if (typeof image === \"string\") {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nexport default class App extends React.Component {\n  state = {\n    isLoadingComplete: false,\n  };\n\n  componentDidMount() {\n    this.loadAssetsAsync();\n  }\n\n  loadAssetsAsync = async () => {\n    await Font.loadAsync({\n      ArgonExtra: require(\"./assets/font/argon.ttf\"),\n      indieFlower: require(\"./assets/fonts/indieFlower.ttf\"),\n      \"Material Icons\": require(\"@expo/vector-icons/fonts/MaterialIcons.ttf\"),\n      MaterialIcons: require(\"@expo/vector-icons/fonts/MaterialIcons.ttf\"),\n      SimpleLineIcons: require(\"@expo/vector-icons/fonts/SimpleLineIcons.ttf\"),\n      \"simple-line-icons\": require(\"@expo/vector-icons/fonts/SimpleLineIcons.ttf\"),\n    });\n    this.setState({ fontLoaded: true });\n  };\n\n  render() {\n    if (!this.state.isLoadingComplete) {\n      return (\n        <AppLoading\n          startAsync={this._loadResourcesAsync}\n          onError={this._handleLoadingError}\n          onFinish={this._handleFinishLoading}\n        />\n      );\n    } else {\n      return (\n        <NavigationContainer>\n          <GalioProvider theme={argonTheme}>\n            <Block flex>\n              <Screens />\n            </Block>\n          </GalioProvider>\n        </NavigationContainer>\n      );\n    }\n  }\n\n  _loadResourcesAsync = async () => {\n    return Promise.all([...cacheImages(assetImages)]);\n  };\n\n  _handleLoadingError = (error) => {\n    // In this case, you might want to report the error to your error\n    // reporting service, for example Sentry\n    console.warn(error);\n  };\n\n  _handleFinishLoading = () => {\n    this.setState({ isLoadingComplete: true });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}